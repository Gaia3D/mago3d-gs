<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gaia3d.persistence.UserGroupMapper">

	<!-- 사용자 그룹 목록 -->
	<select id="getListUserGroup" parameterType="userGroup" resultType="userGroup">
		/* getListUserGroup */
		WITH RECURSIVE user_group_tree (
			user_group_id, group_key, group_name, ancestor, parent, depth, view_order, default_yn, use_yn, child_yn, description, insert_date, path, cycle
		) AS (
	        SELECT A.user_group_id, A.group_key, A.group_name, A.ancestor, A.parent, A.depth, A.view_order, A.default_yn, A.use_yn, A.child_yn, A.description, A.insert_date, ARRAY[A.view_order], false
			FROM user_group A
	        WHERE A.parent = 0
	        <if test="use_yn == 'Y'.toString()">
	        	AND A.use_yn = 'Y'
	        </if>
			UNION ALL
	        SELECT A.user_group_id, A.group_key, A.group_name, A.ancestor, A.parent, A.depth, A.view_order, A.default_yn, A.use_yn, A.child_yn, A.description, A.insert_date, path || A.view_order, A.user_group_id = ANY(path)
	        FROM user_group A, user_group_tree B
	        WHERE A.parent = B.user_group_id AND not cycle
		)
	    SELECT user_group_id, group_key, group_name, ancestor, parent, depth, view_order, default_yn, use_yn, child_yn, description, insert_date, path
	    FROM user_group_tree
	    <if test="use_yn == 'Y'.toString()">
	    WHERE use_yn = 'Y'
	    </if>
	    ORDER BY path
	</select>
	
	<!-- 사용자 그룹 -->
	<select id="getUserGroup" parameterType="long" resultType="userGroup">
		/* getUserGroup */
		SELECT * FROM user_group WHERE user_group_id = #{user_group_id}
	</select>
	
	<!-- 사용자 그룹에 속한 자식 그룹 개수 -->
	<select id="getUserGroupChildCount" parameterType="long" resultType="int">
		/* getUserGroupChildCount */
		SELECT COUNT(*) FROM user_group WHERE parent = #{parent} and use_yn = 'Y'
	</select>
	
	<!-- 사용자 그룹에 속한 자식 그룹 목록 -->
	<select id="getListUserGroupChild" parameterType="long" resultType="long">
		/* getListUserGroupChild */
		SELECT user_group_id FROM user_group WHERE parent = #{parent}
	</select>

	<!-- 사용자 그룹별 메뉴 목록 -->
	<select id="getListUserGroupMenu" parameterType="long" resultType="userGroupMenu">
		/* getListUserGroupMenu */
		WITH RECURSIVE menu_tree (
			user_group_menu_id, user_group_id, all_yn, read_yn, write_yn, update_yn, delete_yn, 
			menu_id, name, name_en, parent, depth, view_order, default_yn, use_yn, display_yn, url, url_alias, image, image_alt, css_class, path, cycle
		) AS (
	        SELECT X.user_group_menu_id, X.user_group_id, X.all_yn, X.read_yn, X.write_yn, X.update_yn, X.delete_yn, 
				X.menu_id, X.name, X.name_en, X.parent, X.depth, X.view_order, X.default_yn, X.use_yn, 
				X.display_yn, X.url, x.url_alias, X.image, X.image_alt, X.css_class, ARRAY[X.view_order], false
			FROM (
				SELECT A.user_group_menu_id, A.user_group_id, 
					COALESCE(A.all_yn, 'N') AS all_yn, COALESCE(A.read_yn, 'N') AS read_yn, COALESCE(A.write_yn, 'N') AS write_yn, 
					COALESCE(A.update_yn, 'N') AS update_yn, COALESCE(A.delete_yn, 'N') AS delete_yn,
					B.menu_id, B.name, B.name_en, B.parent, B.depth, B.view_order, B.default_yn, B.use_yn, B.display_yn, B.url, B.url_alias, B.image, B.image_alt, B.css_class
				FROM user_group_menu A, menu B
				WHERE user_group_id = #{user_group_id}
					AND A.menu_id = B.menu_id
					AND B.use_yn != 'N'
			) X
	        WHERE X.parent = 0
	        UNION ALL
	        SELECT X.user_group_menu_id, X.user_group_id, X.all_yn, X.read_yn, X.write_yn, X.update_yn, X.delete_yn, 
				X.menu_id, X.name, X.name_en, X.parent, X.depth, X.view_order, X.default_yn, X.use_yn, X.display_yn, X.url, x.url_alias, X.image, X.image_alt, X.css_class,
				path || X.view_order, X.menu_id = ANY(path)
	        FROM (
	        	SELECT A.user_group_menu_id, A.user_group_id,
	        		COALESCE(A.all_yn, 'N') AS all_yn, COALESCE(A.read_yn, 'N') AS read_yn, COALESCE(A.write_yn, 'N') AS write_yn, 
					COALESCE(A.update_yn, 'N') AS update_yn, COALESCE(A.delete_yn, 'N') AS delete_yn, 
					B.menu_id, B.name, B.name_en, B.parent, B.depth, B.view_order, B.default_yn, B.use_yn, B.display_yn, B.url, B.url_alias, B.image, B.image_alt, B.css_class
				FROM user_group_menu A, menu B
				WHERE user_group_id = #{user_group_id}
					AND A.menu_id = B.menu_id
					AND B.use_yn != 'N'
	        ) X, menu_tree Y
	        WHERE X.parent = Y.menu_id AND not cycle
		)
	    SELECT user_group_menu_id, user_group_id, all_yn, read_yn, write_yn, update_yn, delete_yn, 
			menu_id, name, name_en, parent, depth, view_order, default_yn, use_yn, display_yn, url, url_alias, path, image, image_alt, css_class
	    FROM menu_tree
	    ORDER BY path
	</select>
	
	<!-- 부모와 순서를 가지고 유저그룹 정보를 취득 -->
	<select id="getUserGroupByParentAndViewOrder" parameterType="userGroup" resultType="userGroup">
		/* getUserGroupByParentAndViewOrder */
		SELECT * 
		FROM user_group 
		WHERE parent = #{parent} 
		<if test="update_type == 'up'.toString()">
			<![CDATA[
			AND view_order < #{view_order}
			]]>
		ORDER BY view_order DESC 
		</if>
		<if test="update_type == 'down'.toString()">
			<![CDATA[
			AND view_order > #{view_order}
			]]>
		ORDER BY view_order 
		</if>
		LIMIT 1 
	</select>
	
	<!-- 자식 그룹 중 맨 마지막 순서의 그룹 정보를 취득 -->
	<select id="getMaxViewOrderChildUserGroup" parameterType="long" resultType="userGroup">
		/* getMaxViewOrderChildUserGroup */
		SELECT * FROM user_group WHERE parent = #{parent} ORDER BY view_order DESC LIMIT 1 
	</select>
	
	<!-- user_group_id 최대값 -->
	<select id="getMaxUserGroupId" resultType="long">
		/* getMaxUserGroupId */
		SELECT COALESCE(MAX(user_group_id), 0) + 1 FROM user_group
	</select>
	
	<!-- user_group_menu_id 최대값 -->
	<select id="getMaxUserGroupMenuId" resultType="long">
		/* getMaxUserGroupMenuId */
		SELECT COALESCE(MAX(user_group_menu_id), 0) + 1 FROM user_group_menu
	</select>
	
	<!-- 사용자 그룹 등록 -->
	<insert id="insertUserGroup" parameterType="userGroup" >
		/* insertUserGroup */
		INSERT INTO user_group(
			user_group_id, group_key, group_name, ancestor, parent, depth, view_order, use_yn, description
		) values(
			#{user_group_id}, #{group_key}, #{group_name}, #{ancestor}, #{parent}, #{depth}, #{view_order}, #{use_yn}, #{description}
		)
	</insert>
	
	<!-- 사용자 그룹별 메뉴 등록 -->
	<insert id="insertUserGroupMenu" parameterType="userGroupMenu" >
		/* insertUserGroupMenu */
		INSERT INTO user_group_menu(
			user_group_menu_id, user_group_id, menu_id, all_yn, read_yn, write_yn, update_yn, delete_yn
		) values(
			#{user_group_menu_id}, #{user_group_id}, #{menu_id}, #{all_yn}, #{read_yn}, #{write_yn}, #{update_yn}, #{delete_yn}
		)
	</insert>
	
	<!-- 사용자 그룹 수정 -->
	<update id="updateUserGroup" parameterType="userGroup">
		/* updateUserGroup */
		UPDATE user_group
		SET group_key = #{group_key},
			group_name = #{group_name},
			<if test="parent != null and parent != ''">
			ancestor = #{ancestor},
			</if>
			<if test="parent != null and parent != ''">
			parent = #{parent},
			</if>
			<if test="depth != null and depth != ''">
			depth = #{depth},
			</if>
			<if test="view_order != null and view_order != ''">
			view_order = #{view_order},
			</if>
			use_yn = #{use_yn},
			description = #{description}
		WHERE user_group_id = #{user_group_id}
	</update>
	
	<!-- 사용자 그룹 자식 존재 유무 수정 -->
	<update id="updateUserGroupChildYN" parameterType="userGroup">
		UPDATE user_group
		SET child_yn = #{child_yn}
		WHERE user_group_id = #{user_group_id}
	</update>
	
	<!-- 사용자 그룹 메뉴 정보 수정 -->
	<update id="updateUserGroupMenu" parameterType="userGroupMenu">
		/* user_group_menu */
		UPDATE user_group_menu
		SET all_yn = #{all_yn},
			read_yn = #{read_yn},
			write_yn = #{write_yn},
			update_yn = #{update_yn},
			delete_yn = #{delete_yn}
		WHERE user_group_id = #{user_group_id}
			AND menu_id = #{menu_id}
	</update>
	
	<!-- 그룹 순서 수정 -->
	<update id="updateViewOrderUserGroup" parameterType="userGroup">
		/* updateViewOrderUserGroup */
		UPDATE user_group SET view_order = #{view_order} WHERE user_group_id = #{user_group_id}
	</update>
	
	<!-- 자식 그룹 상태 수정-->
	<update id="updateChildUserGroup" parameterType="long">
		/* updateChildUserGroup */
		UPDATE user_group SET use_yn = 'N' WHERE parent = #{parent}
	</update>
	
	<!-- 사용자 그룹 삭제 -->
	<delete id="deleteUserGroup" parameterType="long">
		/* deleteUserGroup */
		DELETE FROM user_group WHERE user_group_id = #{user_group_id} AND default_yn != 'Y'
	</delete>
	
	<!-- 사용자 그룹 메뉴 삭제 -->
	<delete id="deleteUserGroupMenu" parameterType="long">
		/* deleteUserGroupMenu */
		DELETE FROM user_group_menu WHERE user_group_id = #{user_group_id} 
	</delete>
	
	<!-- 메뉴 삭제시 사용자 그룹 메뉴 권한도 삭제 -->
	<delete id="deleteUserGroupMenuList" parameterType="list">
		/* deleteUserGroupMenuList */
		DELETE FROM user_group_menu
		WHERE menu_id IN
		<foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
			#{item.value}
		</foreach> 
	</delete>
</mapper>